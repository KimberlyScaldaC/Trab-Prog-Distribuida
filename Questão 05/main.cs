using System;
using System.Collections.Generic;
using System.Threading;

// Classe que representa um Ve√≠culo
class Veiculo
{
    public int Id { get; } // Identificador √∫nico do ve√≠culo
    public string Rota { get; } // Rota que o ve√≠culo vai percorrer
    private Cruzamento cruzamento; // Inst√¢ncia de Cruzamento, onde o ve√≠culo ir√° passar

    // Construtor que inicializa as propriedades do ve√≠culo
    public Veiculo(int id, string rota, Cruzamento cruzamento)
    {
        Id = id;
        Rota = rota;
        this.cruzamento = cruzamento;
    }

    // M√©todo que simula o ve√≠culo percorrendo rotas e passando pelo cruzamento
    public void Dirigir()
    {
        Console.WriteLine($"Ve√≠culo {Id} iniciou seu percurso");

        // O ve√≠culo vai percorrer 3 rotas (Rota 1, 2 e 3)
        for (int rota = 1; rota <= 3; rota++)
        {
            Console.WriteLine($"Ve√≠culo {Id} iniciando Rota {rota}");
            
            // O ve√≠culo entra no cruzamento na Rota espec√≠fica
            cruzamento.Entrar(Id, $"Rota {rota}");

            // Simula o tempo que o ve√≠culo leva para atravessar o cruzamento (8800 ms)
            Thread.Sleep(8800);

            // O ve√≠culo sai do cruzamento ap√≥s completar a rota
            cruzamento.Sair(Id, $"Rota {rota}");
        }
    }
}

// Classe que representa um Cruzamento
class Cruzamento
{
    private object lockObj = new object(); // Objeto de bloqueio para garantir sincroniza√ß√£o
    private bool cruzamentoOcupado = false; // Flag para indicar se o cruzamento est√° ocupado
    private Queue<int> filaEspera = new Queue<int>(); // Fila de espera para ve√≠culos aguardando para passar

    // M√©todo que simula a entrada de um ve√≠culo no cruzamento
    public void Entrar(int veiculoId, string rota)
    {
        // Bloqueia o c√≥digo para garantir que somente um ve√≠culo passe de cada vez
        lock (lockObj)
        {
            // Coloca o ve√≠culo na fila de espera
            filaEspera.Enqueue(veiculoId);

            // O ve√≠culo espera at√© que o cruzamento n√£o esteja ocupado e seja sua vez
            while (cruzamentoOcupado || filaEspera.Peek() != veiculoId)
            {
                Console.WriteLine($"üö¶ Ve√≠culo {veiculoId} aguardando no cruzamento ({rota})...");
                Monitor.Wait(lockObj); // Espera at√© que seja sua vez de passar
            }

            // O ve√≠culo pode passar, ent√£o o remove da fila de espera e ocupa o cruzamento
            filaEspera.Dequeue();
            cruzamentoOcupado = true;
            Console.WriteLine($"üöó Ve√≠culo {veiculoId} cruzando ({rota})...");
        }
    }

    // M√©todo que simula a sa√≠da de um ve√≠culo do cruzamento
    public void Sair(int veiculoId, string rota)
    {
        // Libera o cruzamento para o pr√≥ximo ve√≠culo
        lock (lockObj)
        {
            cruzamentoOcupado = false;
            Console.WriteLine($"‚úÖ Ve√≠culo {veiculoId} liberou o cruzamento ({rota})...");
            Monitor.PulseAll(lockObj); // Desperta todos os ve√≠culos na fila
        }
    }
}

// Classe que gerencia a simula√ß√£o
class Simulacao
{
    private static int totalVeiculos = 0; // Contador para o n√∫mero total de ve√≠culos
    private static int veiculosProcessados = 0; // Contador para o n√∫mero de ve√≠culos processados
    private static readonly object lockRelatorio = new object(); // Objeto de bloqueio para sincronizar o relat√≥rio

    // M√©todo para registrar que um ve√≠culo foi processado
    public static void RegistrarVeiculoProcessado()
    {
        lock (lockRelatorio)
        {
            veiculosProcessados++; // Incrementa o n√∫mero de ve√≠culos processados
        }
    }

    // M√©todo principal que inicia a simula√ß√£o
    public static void Main()
    {
        // Pergunta ao usu√°rio quantos ve√≠culos deseja simular
        Console.Write("Quantos ve√≠culos deseja simular? ");
        int quantidade = int.Parse(Console.ReadLine()); // L√™ o n√∫mero de ve√≠culos

        Cruzamento cruzamento = new Cruzamento(); // Cria uma inst√¢ncia de cruzamento
        List<Thread> threads = new List<Thread>(); // Lista para armazenar as threads dos ve√≠culos

        for (int i = 0; i < quantidade; i++)
        {
            // A cada itera√ß√£o, cria um novo ve√≠culo
            totalVeiculos++;
            string rota = $"Rota {new Random().Next(1, 3)}"; // Aleatoriamente define a rota do ve√≠culo
            Veiculo veiculo = new Veiculo(i + 1, rota, cruzamento); // Cria o ve√≠culo com um id, rota e cruzamento

            // Cria e inicia uma nova thread para o ve√≠culo
            Thread thread = new Thread(new ThreadStart(veiculo.Dirigir));
            threads.Add(thread);
            thread.Start();

            // Intervalo entre a cria√ß√£o das threads (simula a chegada dos ve√≠culos ao cruzamento)
            Thread.Sleep(5650);
        }

        // Espera todas as threads terminarem antes de continuar
        foreach (Thread thread in threads)
        {
            thread.Join();
        }

        // Exibe o relat√≥rio final ap√≥s todos os ve√≠culos terminarem a simula√ß√£o
        Console.WriteLine("\n=== Relat√≥rio de Tr√°fego ===");
        Console.WriteLine($"Total de ve√≠culos simulados: {totalVeiculos}");
        Console.WriteLine($"Total de ve√≠culos processados: {veiculosProcessados}");
    }
}
